// src/index.ts

import {
    Client,
    GatewayIntentBits,
    ActionRowBuilder,
    StringSelectMenuBuilder,
    ButtonBuilder,
    ButtonStyle,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    InteractionType,
    TextChannel,
    ChannelType,
    PermissionFlagsBits,
    Events,
    Partials,
    AttachmentBuilder,
    EmbedBuilder,
    Message,
} from 'discord.js';
import dotenv from 'dotenv';
dotenv.config();

// **Remplacez les valeurs ci-dessous par vos propres IDs**
const CHANNEL_ID = '1263546795586490419'; // ID du salon pour le menu de s√©lection
const CATEGORY_ID = '1263546795586490418'; // ID de la cat√©gorie pour les tickets
const STAFF_ROLE_ID = '1263546795137437714'; // ID du r√¥le du staff
const TRANSCRIPT_CHANNEL_ID = '1299661497575931914'; // ID du salon o√π envoyer les transcripts

// **Ajoutez les IDs des r√¥les autoris√©s pour la cat√©gorie "bug"**
const BUG_ROLE_ID_1 = '1300536444133179444'; // Remplacez par l'ID du premier r√¥le
const BUG_ROLE_ID_2 = '1263546795129311288'; // Remplacez par l'ID du second r√¥le

const client = new Client({
    intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages],
    partials: [Partials.Channel, Partials.Message]
});

client.once(Events.ClientReady, () => {
    console.log(`Connect√© en tant que ${client.user?.tag}`);
    sendSelectMenuMessage();
});

async function sendSelectMenuMessage() {
    try {
        const channel = await client.channels.fetch(CHANNEL_ID) as TextChannel;
        if (!channel) {
            console.error('Salon non trouv√©.');
            return;
        }

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('category_select')
            .setPlaceholder('S√©lectionnez une cat√©gorie')
            .addOptions(
                {
                    label: 'Partenariats',
                    value: 'partenariats',
                    description: "Je veux √™tre partenaire.",
                    emoji: "üìπ"
                },
                {
                    label: 'Questions & Aide',
                    value: 'questions_aide',
                    description: "J'ai une question | besoin d'aide.",
                    emoji: "‚ùì"
                },
                {
                    label: 'Plainte',
                    value: 'plainte',
                    description: "J'ai une plainte √† d√©poser contre un joueur.",
                    emoji: "üò°"
                },
                {
                    label: 'Remboursements',
                    value: 'remboursements',
                    description: "J'ai perdu mon stuff √† cause d'un bug.",
                    emoji: "üéí"
                },
                {
                    label: 'Signalement de bug',
                    value: 'signalement_bug',
                    description: "Je veux signaler un bug.",
                    emoji: "üêõ"
                },
                {
                    label: 'Contestation de sanction',
                    value: 'contestation_sanction',
                    description: "Je veux contester une sanction",
                    emoji: "üó£Ô∏è"
                },
                {
                    label: 'Intervention',
                    value: 'intervention',
                    description: "J'ai besoin d'un unclaim, afficher au spawn..",
                    emoji: "üì©"
                }
            );

        const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(selectMenu);

        // Cr√©ation de l'embed pour le message
        const embed = new EmbedBuilder()
            .setTitle('Cr√©er un Ticket')
            .setDescription(`
                # Bienvenue ! :wave::skin-tone-2:
                Cliquez sur le menu ci-dessous pour s√©lectionner un motif d'ouverture de ticket.
                Lors de l'ouverture d'un ticket, n'oubliez jamais les formes et la politesse. Les tickets ouverts sans sont automatiquement ferm√©s.

                Veuillez s√©lectionner une cat√©gorie pour votre ticket.
                
                **Partenariat**
                Je suis vid√©aste, et je souhaite obtenir le grade Ambassadeur. 
                Je suis membre d'une organisation et souhaite nouer un partenariat.

                **Question / Aide**
                Je souhaite poser une question. J'ai envie d'organiser un √©v√©nement et j'ai besoin d'aide pour l'organiser.

                **Plainte**
                Un joueur des BadLands me d√©range. Je souhaite d√©poser plainte envers celui-ci.

                **Remboursement**
                Vous avez perdu votre stuff √† cause d'un bug.

                **Signalement de bug**
                J'ai rencontr√© un probl√®me / un comportement anormal du serveur de jeu et souhaite le signaler.

                **Contestation de sanction**
                J'ai √©t√© sanctionn√© et conteste ma sanction.

                **Intervention**
                Tickets n√©cessitant l'intervention d'un op√©rateur (Unclaim d'un land, placer une affiche dans le Spawn...)
                `)
            .setColor(0x00AE86);

        await channel.send({ embeds: [embed], components: [row] });
        console.log('Message avec le menu de s√©lection envoy√© avec succ√®s.');
    } catch (error) {
        console.error('Erreur lors de l\'envoi du message :', error);
    }
}

client.on(Events.InteractionCreate, async interaction => {
    if (interaction.isStringSelectMenu()) {
        if (interaction.customId === 'category_select') {
            const selectedCategory = interaction.values[0];

            // Cr√©er la modale sp√©cifique en fonction de la cat√©gorie
            const modal = createModalForCategory(selectedCategory);

            await interaction.showModal(modal);
        }
    } else if (interaction.type === InteractionType.ModalSubmit) {
        if (interaction.customId.startsWith('ticket_modal_')) {
            const selectedCategory = interaction.customId.replace('ticket_modal_', '');

            // R√©cup√©rer les valeurs des champs de la modale
            const fields = getModalFieldsForCategory(selectedCategory, interaction);

            // Cr√©er un nouveau canal de ticket
            const guild = interaction.guild;
            if (!guild) {
                await interaction.reply({ content: 'Impossible de cr√©er un ticket en dehors d\'un serveur.', ephemeral: true });
                return;
            }

            try {
                // Map pour les pr√©fixes de cat√©gories
                const categoryPrefixes: { [key: string]: string } = {
                    'signalement_bug': 'bug',
                    'plainte': 'plainte',
                    'remboursements': 'refund',
                    'contestation_sanction': 'protest',
                    'questions_aide': 'question',
                    'intervention': 'inter',
                    'partenariats': 'partena'
                };

                const categoryPrefix = categoryPrefixes[selectedCategory] || 'ticket';
                const channelName = `${categoryPrefix}-${interaction.user.username}`;

                // D√©finition des permissions
                const permissionOverwrites = [
                    {
                        id: guild.id,
                        deny: [PermissionFlagsBits.ViewChannel],
                    },
                    {
                        id: interaction.user.id,
                        allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ReadMessageHistory],
                    },
                    {
                        id: STAFF_ROLE_ID,
                        allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ReadMessageHistory],
                    },
                ];

                // Ajout des r√¥les sp√©cifiques pour la cat√©gorie "bug"
                if (selectedCategory === 'signalement_bug') {
                    permissionOverwrites.push(
                        {
                            id: BUG_ROLE_ID_1,
                            allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ReadMessageHistory],
                        },
                        {
                            id: BUG_ROLE_ID_2,
                            allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ReadMessageHistory],
                        }
                    );
                }

                const ticketChannel = await guild.channels.create({
                    name: channelName,
                    type: ChannelType.GuildText,
                    parent: CATEGORY_ID,
                    topic: interaction.user.id, // Stocke l'ID du cr√©ateur du ticket
                    permissionOverwrites: permissionOverwrites,
                });

                // Cr√©er les boutons de r√©clamation et de fermeture
                const claimButton = new ButtonBuilder()
                    .setCustomId('claim_ticket')
                    .setLabel('R√©clamer le ticket')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üõ†Ô∏è');

                const closeButton = new ButtonBuilder()
                    .setCustomId('close_ticket')
                    .setLabel('Fermer le ticket')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('‚ùå');

                const buttonRow = new ActionRowBuilder<ButtonBuilder>().addComponents(claimButton, closeButton);

                // Cr√©er l'embed pour le message du ticket
                const embed = new EmbedBuilder()
                    .setTitle(`Nouveau ticket cr√©√© par ${interaction.user.tag}`)
                    .setColor(0x00AE86)
                    .setTimestamp();

                // Ajouter les champs au message du ticket
                embed.addFields({ name: 'Cat√©gorie', value: selectedCategory, inline: true });

                for (const fieldName in fields) {
                    embed.addFields({ name: fieldName, value: fields[fieldName], inline: false });
                }

                // Envoyer le message dans le canal du ticket avec les boutons
                await ticketChannel.send({
                    embeds: [embed],
                    components: [buttonRow],
                });

                // Envoyer un message de confirmation √† l'utilisateur
                await interaction.reply({ content: `Votre ticket a √©t√© cr√©√© : ${ticketChannel}`, ephemeral: true });

            } catch (error) {
                console.error('Erreur lors de la cr√©ation du canal de ticket :', error);
                await interaction.reply({ content: 'Une erreur est survenue lors de la cr√©ation de votre ticket.', ephemeral: true });
            }
        } else if (interaction.customId === 'close_ticket_modal') {
            const channel = interaction.channel as TextChannel;
            if (!channel || !channel.name.startsWith('ticket-') && !channel.name.includes('-')) {
                await interaction.reply({ content: 'Cette action ne peut √™tre effectu√©e que dans un canal de ticket.', ephemeral: true });
                return;
            }

            const member = interaction.member;
            const isStaff = (member?.roles as any).cache.has(STAFF_ROLE_ID);
            const isTicketOwner = channel.topic === interaction.user.id;

            if (!isStaff && !isTicketOwner) {
                await interaction.reply({ content: 'Vous n\'avez pas la permission de fermer ce ticket.', ephemeral: true });
                return;
            }

            const closeReason = interaction.fields.getTextInputValue('close_reason') || 'Aucun motif fourni.';

            // Envoyer le transcript
            try {
                const messages = await fetchChannelMessages(channel);
                const transcript = messages.reverse().map(formatMessage).join('\n');

                const attachment = new AttachmentBuilder(Buffer.from(transcript, 'utf-8'), { name: `transcript-${channel.name}.txt` });

                const transcriptChannel = await client.channels.fetch(TRANSCRIPT_CHANNEL_ID) as TextChannel;
                if (transcriptChannel) {
                    await transcriptChannel.send({ content: `Transcript du ticket ${channel.name} ferm√© par ${interaction.user}\nMotif : ${closeReason}`, files: [attachment] });
                }
            } catch (error) {
                console.error('Erreur lors de la cr√©ation du transcript :', error);
            }

            await interaction.reply({ content: `Ticket ferm√© par ${interaction.user}\nMotif : ${closeReason}` });

            setTimeout(async () => {
                await channel.delete().catch(console.error);
            }, 5000);
        }
    } else if (interaction.isButton()) {
        const channel = interaction.channel as TextChannel;
        if (!channel || !channel.name.startsWith('ticket-') && !channel.name.includes('-')) {
            await interaction.reply({ content: 'Ce bouton ne peut √™tre utilis√© que dans un canal de ticket.', ephemeral: true });
            return;
        }

        if (interaction.customId === 'claim_ticket') {
            // V√©rifier si l'utilisateur a le r√¥le du staff
            const member = interaction.member;
            const isStaff = (member?.roles as any).cache.has(STAFF_ROLE_ID);

            if (!isStaff) {
                await interaction.reply({ content: 'Vous n\'avez pas la permission de r√©clamer ce ticket.', ephemeral: true });
                return;
            }

            // Ajouter une permission pour le membre
            await channel.permissionOverwrites.edit(interaction.user.id, {
                ViewChannel: true,
                SendMessages: true,
                ReadMessageHistory: true,
            });

            await interaction.reply({ content: `${interaction.user} a r√©clam√© le ticket et va d√©sormais s'occuper de vous. Merci pour votre patience.` });
        } else if (interaction.customId === 'close_ticket') {
            // Ajouter une modale pour le motif de fermeture
            const reasonModal = new ModalBuilder()
                .setCustomId('close_ticket_modal')
                .setTitle('Motif de fermeture du ticket');

            const reasonInput = new TextInputBuilder()
                .setCustomId('close_reason')
                .setLabel('Motif de fermeture')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(false);

            const modalRow = new ActionRowBuilder<TextInputBuilder>().addComponents(reasonInput);
            reasonModal.addComponents(modalRow);

            await interaction.showModal(reasonModal);
        }
    }
});

// Fonction pour cr√©er la modale en fonction de la cat√©gorie
function createModalForCategory(category: string): ModalBuilder {
    const modal = new ModalBuilder()
        .setCustomId(`ticket_modal_${category}`)
        .setTitle('Ouvrir un Ticket');

    const components: ActionRowBuilder<TextInputBuilder>[] = [];

    // Champ commun : Pseudo en jeu (obligatoire)
    const usernameInput = new TextInputBuilder()
        .setCustomId('Pseudo en jeu')
        .setLabel('Votre pseudo en jeu')
        .setStyle(TextInputStyle.Short)
        .setRequired(true)
        .setPlaceholder("Entrez votre pseudo en jeu.");

    components.push(new ActionRowBuilder<TextInputBuilder>().addComponents(usernameInput));

    switch (category) {
        case 'signalement_bug':
            // Sur lequel de nos serveur et/ou monde ? (obligatoire)
            const serverWorldInput_bug = new TextInputBuilder()
                .setCustomId('Serveur/Monde')
                .setLabel('Sur quel serveur/monde ?')
                .setStyle(TextInputStyle.Short)
                .setRequired(false)
                .setPlaceholder("Sur lequel de nos serveur et/ou monde ?");

            // Description du bug (obligatoire)
            const bugDescriptionInput = new TextInputBuilder()
                .setCustomId('Description du bug')
                .setLabel('Description du bug')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true)
                .setPlaceholder("Quel bug avez-vous rencontr√©(e) ?");

            // Comment reproduire le bug? (optionnel)
            const reproduceBugInput = new TextInputBuilder()
                .setCustomId('Comment reproduire le bug')
                .setLabel('Comment reproduire le bug ?')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(false)
                .setPlaceholder("Expliquez-nous comment reproduire ce bug.");

            // Erreur dans le tchat (optionnel)
            const chatErrorInput = new TextInputBuilder()
                .setCustomId('Erreur dans le tchat')
                .setLabel('Erreur dans le tchat')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(false)
                .setPlaceholder("√âcrivez l'erreur s'il y en a une.");

            components.push(
                new ActionRowBuilder<TextInputBuilder>().addComponents(serverWorldInput_bug),
                new ActionRowBuilder<TextInputBuilder>().addComponents(bugDescriptionInput),
                new ActionRowBuilder<TextInputBuilder>().addComponents(reproduceBugInput),
                new ActionRowBuilder<TextInputBuilder>().addComponents(chatErrorInput),
            );
            break;

        case 'plainte':
            // Sur lequel de nos serveur et/ou monde ? (obligatoire)
            const serverWorldInput_plainte = new TextInputBuilder()
                .setCustomId('Serveur/Monde')
                .setLabel('Sur quel serveur/monde ?')
                .setStyle(TextInputStyle.Short)
                .setRequired(false)
                .setPlaceholder("Sur lequel de nos serveur et/ou monde ?");

            // Pseudo du/des fautif(s) (obligatoire)
            const offenderInput = new TextInputBuilder()
                .setCustomId('Pseudo du/des fautif(s)')
                .setLabel('Pseudo du/des fautif(s)')
                .setStyle(TextInputStyle.Short)
                .setRequired(true)
                .setPlaceholder("Entrez le(s) pseudo(s) du/des fautif(s).");

            // Description du probl√®me (obligatoire)
            const problemDescriptionInput = new TextInputBuilder()
                .setCustomId('Description du probl√®me')
                .setLabel('Description du probl√®me')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true)
                .setPlaceholder("D√©crivez le probl√®me rencontr√©.");

            components.push(
                new ActionRowBuilder<TextInputBuilder>().addComponents(serverWorldInput_plainte),
                new ActionRowBuilder<TextInputBuilder>().addComponents(offenderInput),
                new ActionRowBuilder<TextInputBuilder>().addComponents(problemDescriptionInput),
            );
            break;

        case 'questions_aide':
            // Sur lequel de nos serveur et/ou monde ? (obligatoire)
            const serverWorldInput_aide = new TextInputBuilder()
                .setCustomId('Serveur/Monde')
                .setLabel('Sur quel serveur/monde ?')
                .setStyle(TextInputStyle.Short)
                .setRequired(false)
                .setPlaceholder("Sur lequel de nos serveur et/ou monde ?");

            // De quoi avez-vous besoin ? (obligatoire)
            const needInput = new TextInputBuilder()
                .setCustomId('Votre demande')
                .setLabel('De quoi avez-vous besoin ?')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true)
                .setPlaceholder("Expliquez votre besoin.");

            components.push(
                new ActionRowBuilder<TextInputBuilder>().addComponents(serverWorldInput_aide),
                new ActionRowBuilder<TextInputBuilder>().addComponents(needInput),
            );
            break;

        case 'remboursements':
            // Sur lequel de nos serveur et/ou monde ? (obligatoire)
            const serverWorldInput_remboursement = new TextInputBuilder()
                .setCustomId('Serveur/Monde')
                .setLabel('Sur quel serveur/monde ?')
                .setStyle(TextInputStyle.Short)
                .setRequired(false)
                .setPlaceholder("Sur lequel de nos serveur et/ou monde ?");

            // Comment avez-vous perdu vos √©quipements ? (obligatoire)
            const lossExplanationInput = new TextInputBuilder()
                .setCustomId('Comment avez-vous perdu vos √©quipements')
                .setLabel('Comment avez-vous perdu vos √©quipements ?')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true)
                .setPlaceholder("Expliquez les circonstances de la perte.");

            // Avez-vous vu un comportement anormal du serveur ? (optionnel)
            const serverIssueInput = new TextInputBuilder()
                .setCustomId('Comportement anormal du serveur')
                .setLabel('Comportement anormal du serveur ?')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(false)
                .setPlaceholder("Avez-vous vu un comportement anormal du serveur ?");

            components.push(
                new ActionRowBuilder<TextInputBuilder>().addComponents(serverWorldInput_remboursement),
                new ActionRowBuilder<TextInputBuilder>().addComponents(lossExplanationInput),
                new ActionRowBuilder<TextInputBuilder>().addComponents(serverIssueInput),
            );
            break;

        case 'contestation_sanction':
            // Pourquoi avez-vous √©t√© sanctionn√© ? (obligatoire)
            const sanctionReasonInput = new TextInputBuilder()
                .setCustomId('Raison de la sanction')
                .setLabel('Pourquoi avez-vous √©t√© sanctionn√© ?')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true)
                .setPlaceholder("Expliquez la raison de votre sanction.");

            // Pour quelle raison devrions-nous retirer votre sanction ? (optionnel)
            const appealReasonInput = new TextInputBuilder()
                .setCustomId('Raison du retrait de la sanction')
                .setLabel('Pour quelle raison retirer votre sanction ?')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(false)
                .setPlaceholder("Pour quelle raison devrions-nous retirer votre sanction ?");

            components.push(
                new ActionRowBuilder<TextInputBuilder>().addComponents(sanctionReasonInput),
                new ActionRowBuilder<TextInputBuilder>().addComponents(appealReasonInput),
            );
            break;

        case 'intervention':
            // Sur lequel de nos serveur et/ou monde ? (obligatoire)
            const serverWorldInput_intervention = new TextInputBuilder()
                .setCustomId('Serveur/Monde')
                .setLabel('Sur quel serveur/monde ?')
                .setStyle(TextInputStyle.Short)
                .setRequired(false)
                .setPlaceholder("Sur lequel de nos serveur et/ou monde ?");

            // Pourquoi avez-vous besoin d'une intervention Haut Staff ? (obligatoire)
            const interventionReasonInput = new TextInputBuilder()
                .setCustomId('Raison de l\'intervention')
                .setLabel('Pourquoi une intervention Haut Staff ?')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true)
                .setPlaceholder("Pourquoi avez-vous besoin d'une intervention Haut Staff ?");

            components.push(
                new ActionRowBuilder<TextInputBuilder>().addComponents(serverWorldInput_intervention),
                new ActionRowBuilder<TextInputBuilder>().addComponents(interventionReasonInput),
            );
            break;

        case 'partenariats':
            // Pr√©sentez-nous votre projet (obligatoire)
            const projectPresentationInput = new TextInputBuilder()
                .setCustomId('Pr√©sentation du projet')
                .setLabel('Pr√©sentez-nous votre projet')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true)
                .setPlaceholder("D√©crivez votre projet en d√©tail.");

            components.push(
                new ActionRowBuilder<TextInputBuilder>().addComponents(projectPresentationInput),
            );
            break;

        default:
            // Cat√©gorie inconnue, utiliser le formulaire par d√©faut
            const defaultReasonInput = new TextInputBuilder()
                .setCustomId('Raison du ticket')
                .setLabel('Raison du ticket')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(false)
                .setPlaceholder("Entrez la raison de votre demande. N'oubliez pas la politesse !");

            components.push(new ActionRowBuilder<TextInputBuilder>().addComponents(defaultReasonInput));
            break;
    }

    modal.addComponents(...components);

    return modal;
}

// Fonction pour r√©cup√©rer les valeurs des champs de la modale en fonction de la cat√©gorie
function getModalFieldsForCategory(category: string, interaction: any): { [key: string]: string } {
    const fields: { [key: string]: string } = {};

    // Pseudo en jeu (commun)
    fields['Pseudo en jeu'] = interaction.fields.getTextInputValue('Pseudo en jeu');

    switch (category) {
        case 'signalement_bug':
            fields['Serveur/Monde'] = interaction.fields.getTextInputValue('Serveur/Monde') || 'Non sp√©cifi√©';
            fields['Description du bug'] = interaction.fields.getTextInputValue('Description du bug');
            fields['Comment reproduire le bug'] = interaction.fields.getTextInputValue('Comment reproduire le bug') || 'Non sp√©cifi√©';
            fields['Erreur dans le tchat'] = interaction.fields.getTextInputValue('Erreur dans le tchat') || 'Non sp√©cifi√©';
            break;

        case 'plainte':
            fields['Serveur/Monde'] = interaction.fields.getTextInputValue('Serveur/Monde') || 'Non sp√©cifi√©';
            fields['Pseudo du/des fautif(s)'] = interaction.fields.getTextInputValue('Pseudo du/des fautif(s)');
            fields['Description du probl√®me'] = interaction.fields.getTextInputValue('Description du probl√®me');
            break;

        case 'questions_aide':
            fields['Serveur/Monde'] = interaction.fields.getTextInputValue('Serveur/Monde') || 'Non sp√©cifi√©';
            fields['Votre demande'] = interaction.fields.getTextInputValue('Votre demande');
            break;

        case 'remboursements':
            fields['Serveur/Monde'] = interaction.fields.getTextInputValue('Serveur/Monde') || 'Non sp√©cifi√©';
            fields['Comment avez-vous perdu vos √©quipements ?'] = interaction.fields.getTextInputValue('Comment avez-vous perdu vos √©quipements');
            fields['Comportement anormal du serveur ?'] = interaction.fields.getTextInputValue('Comportement anormal du serveur') || 'Non sp√©cifi√©';
            break;

        case 'contestation_sanction':
            fields['Pourquoi avez-vous √©t√© sanctionn√© ?'] = interaction.fields.getTextInputValue('Raison de la sanction');
            fields['Pourquoi retirer votre sanction ?'] = interaction.fields.getTextInputValue('Raison du retrait de la sanction') || 'Non sp√©cifi√©';
            break;

        case 'intervention':
            fields['Serveur/Monde'] = interaction.fields.getTextInputValue('Serveur/Monde') || 'Non sp√©cifi√©';
            fields['Pourquoi une intervention Haut Staff ?'] = interaction.fields.getTextInputValue('Raison de l\'intervention');
            break;

        case 'partenariats':
            fields['Pr√©sentation du projet'] = interaction.fields.getTextInputValue('Pr√©sentation du projet');
            break;

        default:
            fields['Raison du ticket'] = interaction.fields.getTextInputValue('Raison du ticket');
            break;
    }

    return fields;
}

async function fetchChannelMessages(channel: TextChannel): Promise<Message[]> {
    let messages: Message[] = [];
    let lastId: string | undefined;

    while (true) {
        const fetchedMessages = await channel.messages.fetch({ limit: 100, before: lastId });
        if (fetchedMessages.size === 0) {
            break;
        }
        messages = messages.concat(Array.from(fetchedMessages.values()));
        lastId = fetchedMessages.last()?.id;
    }
    return messages;
}

// Fonction pour formater les messages pour le transcript
function formatMessage(message: Message): string {
    const author = `${message.author.tag}`;
    let content = message.content || '';

    // Si le message a des embeds, les inclure
    if (message.embeds.length > 0) {
        content += '\n[Embed]';
        message.embeds.forEach(embed => {
            if (embed.title) content += `\nTitre: ${embed.title}`;
            if (embed.description) content += `\nDescription: ${embed.description}`;
            if (embed.fields) {
                embed.fields.forEach(field => {
                    content += `\n${field.name}: ${field.value}`;
                });
            }
        });
    }

    // Si le message a des pi√®ces jointes, les inclure
    if (message.attachments.size > 0) {
        content += '\n[Pi√®ces jointes]';
        message.attachments.forEach(attachment => {
            content += `\n${attachment.url}`;
        });
    }

    return `${author}: ${content}`;
}

client.login(process.env.DISCORD_BOT_TOKEN);
