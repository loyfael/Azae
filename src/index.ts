import { Client, GatewayIntentBits, Partials, ActivityType } from 'discord.js';

/** 
 * Importation du module dotenv pour gÃ©rer les variables d'environnement.
 * Le .env contient des donnÃ©es sensibles mais obligatoire au fonctionnement
 * du bot tel que son token.
 */ 
import dotenv from 'dotenv';
dotenv.config(); // Charge les variables d'environnement depuis le fichier .env

// Importation des gestionnaires d'Ã©vÃ©nements personnalisÃ©s
import { handleReady } from './events/ready'; // Gestionnaire pour l'Ã©vÃ©nement 'ready'
import { handleInteractionCreate } from './events/interactionCreate'; // Gestionnaire pour l'Ã©vÃ©nement 'interactionCreate'

// Importation de la fonction pour rÃ©cupÃ©rer le nombre de joueurs Minecraft
import { getMinecraftPlayerCount } from './utils/minecraftStatus';

// CrÃ©ation d'une nouvelle instance de Client Discord avec les intents et partials nÃ©cessaires
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds, // Permet au bot d'accÃ©der aux informations des serveurs (guilds)
        GatewayIntentBits.GuildMessages // Permet au bot de recevoir les messages des salons de texte
    ],
    partials: [
        Partials.Channel, // Permet au bot de gÃ©rer les salons partiels (par exemple, les salons DM)
        Partials.Message // Permet au bot de gÃ©rer les messages partiels (par exemple, les messages non cachÃ©s au dÃ©marrage)
    ]
});

/**
 * Fonction pour mettre Ã  jour le statut du bot avec le nombre de joueurs Minecraft.
 */
async function updateBotStatus() {
    const playerCount = await getMinecraftPlayerCount();
    if (client.user) {
        if (playerCount > 0) {
            client.user.setActivity(`ðŸŸ¢ ${playerCount} joueur(euse)s`, { type: ActivityType.Watching });
        } else {
            client.user.setActivity(`*Boup bip*`, { type: ActivityType.Playing });
        }
    }
}

/**
 * Gestionnaire de l'Ã©vÃ©nement 'ready'.
 * 
 * Cet Ã©vÃ©nement est Ã©mis lorsque le bot Discord est connectÃ© et prÃªt Ã  Ãªtre utilisÃ©.
 * Il appelle la fonction `handleReady` pour effectuer les initialisations nÃ©cessaires.
 * Il met Ã©galement Ã  jour le statut du bot et configure la mise Ã  jour pÃ©riodique.
 */
client.once('ready', async () => {
    handleReady(client);
    await updateBotStatus(); // Mettre Ã  jour le statut au dÃ©marrage

    // Mettre Ã  jour le statut toutes les 5 minutes (300000 ms)
    setInterval(updateBotStatus, 60000);
});

/**
 * Gestionnaire de l'Ã©vÃ©nement 'interactionCreate'.
 * 
 * Cet Ã©vÃ©nement est Ã©mis chaque fois qu'une interaction est crÃ©Ã©e (par exemple, un clic sur un bouton, une sÃ©lection dans un menu, etc.).
 * Il appelle la fonction `handleInteractionCreate` pour traiter l'interaction en fonction de son type et de son contenu.
 */
client.on('interactionCreate', (interaction) => {
    handleInteractionCreate(client, interaction);
});

/**
 * Connexion du bot Ã  Discord en utilisant le token fourni dans les variables d'environnement.
 * 
 * Assurez-vous que le fichier `.env` contient la variable `DISCORD_BOT_TOKEN` avec le token de votre bot.
 */
client.login(process.env.DISCORD_BOT_TOKEN);
